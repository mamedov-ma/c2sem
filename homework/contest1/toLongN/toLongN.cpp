#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



//=============================================================================
//Инизиализация, все как обычно..
//=============================================================================


typedef struct{
    char sign;   // знак числа
    int n;       // количество разрядов (по основанию 100)
    char dig[0]; // будущий массив для разрядов числа
}LongN;


LongN *  getLongN(char * s);

void showDigit(const LongN *a);

void destroyLN(LongN * a);

LongN * copyLN(const LongN *a);


//=============================================================================
//Преобразуем полученную строку в переменную типа LongN
//=============================================================================


LongN *  getLongN(char * s)
{
    //printf("%s", s);

    int len = strlen(s);

    //printf("%d", len);

    char *sp = s, *pdig = 0;

    int k = 0, p = 0;

    LongN* tmp = 0;

// Выделение памяти под структуру для числа
// Память выделяется под структуру (элементы).
// Плюс сразу еще выделяется дополнительно память для 1000 элементов типа char
// При объявлении структуры элемент массива должен быть расположен последним.

    tmp = (LongN*)calloc(1, (sizeof(LongN) + 1000 * sizeof(char)));

// Все элементы структуры обнулены. Можно пользоваться этим объектом.
// Пустая строка - 0

    if (s[0] == '\0')
    {
        tmp->n = 1;
        return tmp;
    }

// Проверка на знак.

    //printf("%c", sp[0]);

    if( !isdigit(sp[0]) )
    {
        if(sp[0] == '-')
            tmp->sign = 1;

        sp++;

        len--;
    }

// Определение количества разрядов числа

    tmp->n = ( len % 2 == 0) ? len / 2 : len / 2 + 1;

    //printf("%d", tmp->n);
// Заполнение разрядов числа

    for(k = 0 ; len > 2; k++)
    {
        int num = 0;

        len = strlen(sp);

        //printf("%d", len);

        pdig = sp + len - 2;

        //printf("%s", pdig);


        if (len - 2 < 0)
            pdig = sp;

        sscanf(pdig, "%hhu", &num);

        //printf("%d", num);

        p = ( num + p) / 100;

        //printf("%d", p);

        //printf("%d  %d", k, len);

        //printf("%d", strlen(sp));

        tmp->dig[k] = (num + p) % 100;

        //printf("%d", tmp->dig[k]);


        pdig[0] = '\0';
    }

    return tmp;
}


//=============================================================================
// Печать числа
//=============================================================================

void showDigit(const LongN *a)
{
    int i;

    if (a->sign == 1)
        printf("- ");
    else
        printf("+ ");

    for( i = a->n - 1 ; i > -1; i--)
        printf("%d ", a->dig[i]);

    printf("\n");
}



//=============================================================================
//Создаем вторую переменную типа LongN, с той же информацией, что и в исходной
//=============================================================================


LongN * copyLN(const LongN *a)
{
    LongN * b = 0;

    b->sign = a->sign;
    b->n = a->n;

    printf("%c %d", b->sign, b->n);

    printf("%d", strlen(a->dig));

    for(int i = 0; i < strlen(a->dig); i++)
    {
         b->dig[i] = a->dig[i];

    }

    return b;
}


//=============================================================================
// Освобождение памяти числа
//=============================================================================


void destroyLN(LongN * a)
{

// Память выделялась одной областью,
// Значит достаточно написать так
    free(a);
}

//=============================================================================
//Про мейн тоже не забыли
//=============================================================================


int main()
{
    LongN *a, *b = 0;

    char s[201];

    scanf("%s", s);

    a = getLongN(s);

    showDigit(a);

    b = copyLN(a);

    showDigit(b);

    destroyLN(a);

    return 0;
}


//=============================================================================
// Программа завершилась, поздравляю!!!
//=============================================================================
